openapi: 3.0.0

info:
  title: citytrees public API
  contact:
    name: Nagovitsin Maxim
    email: nagovitsin.maxim@gmail.com
  version: 0.0.1

servers:
  - url: http://localhost:8080/api/v1
    description: local environment

paths:
  /user/register:
    post:
      tags:
        - user-controller
      summary: Registers new user
      operationId: registerNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        200:
          description: User successfully created. User id is in response's body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegisterResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/{id}:
    get:
      tags:
        - user-controller
      summary: Returns user's information
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user-controller
      summary: Edits user's information
      operationId: updateUserById
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/password:
    put:
      tags:
        - user-controller
      summary: Updates current user's password
      operationId: updateUserPassword
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePasswordRequest"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'


  /auth/jwt/refresh:
    post:
      tags:
        - auth-controller
      summary: Create new pair of Cookies (ct_access_token, ct_refresh_token) using old ct_refresh_token
      operationId: refreshTokenPair
      security:
        - CookieAuth: [ ]
      parameters:
        - name: ct_refresh_token
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: Successfully refreshed token pair. Access and Refresh tokens are returned in cookies named 'ct_access_token' and 'ct_refresh_token'. Refresh token is HttpOnly
          headers:
            Set-Cookie:
              schema:
                type: string
                example: ct_access_token=some_jwt; Path=/;
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/basic:
    post:
      tags:
        - auth-controller
      summary: Authenticate user using login and password
      operationId: handleBasicAuth
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully authenticated. Access and Refresh tokens are returned in cookies named 'ct_access_token' and 'ct_refresh_token'. Refresh token is HttpOnly.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: ct_access_token=some_jwt; Path=/;
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    post:
      tags:
        - auth-controller
      summary: Logout
      operationId: handleLogout
      security:
        - CookieAuth: [ ]
      parameters:
        - name: ct_refresh_token
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: Removes cookies
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/oauth2/{provider}:
    get:
      tags:
        - auth-controller
      summary: Authenticates user using third-party provider
      operationId: handle0Auth2
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum:
              - google
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tree:
    post:
      tags:
        - tree-controller
      summary: Add new tree
      operationId: createTree
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TreeCreateRequest"
      responses:
        200:
          description: Tree successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TreeCreateResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /tree/{id}:
    delete:
      tags:
        - tree-controller
      operationId: deleteTree
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tree/file/{treeId}:
    post:
      tags:
        - tree-controller
      summary: Attach file to tree
      operationId: attachFile
      security:
        - BearerAuth: [ ]
      parameters:
        - name: treeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUploadRequest"
      responses:
        200:
          description: File successfully uploaded. It's id is in response's body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /trees:
    get:
      tags:
        - trees-controller
      summary: Load trees in region
      operationId: loadTreesByRegion
      parameters:
        - name: x1
          description: top left latitude
          in: query
          required: true
          schema:
            type: number
        - name: y1
          description: top left longitude
          in: query
          required: true
          schema:
            type: number
        - name: x2
          description: bottom right latitude
          in: query
          required: true
          schema:
            type: number
        - name: y2
          description: bottom right longitude
          in: query
          required: true
          schema:
            type: number
      responses:
        200:
          description: Trees in specified region
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreesGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'


  /file/upload:
    post:
      tags:
        - file-controller
      summary: Uploads file
      operationId: uploadFile
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUploadRequest"
      responses:
        200:
          description: File successfully uploaded. It's id is in response's body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /file/{id}:
    get:
      tags:
        - file-controller
      operationId: getFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Returns file's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - file-controller
      operationId: deleteFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /file/download/{id}:
    get:
      tags:
        - file-controller
      operationId: downloadFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Downloads file
          content:
            text/plain:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    UserRole:
      type: string
      enum:
        - ADMIN
        - BASIC

    TreeStatus:
      type: string
      enum:
        - NEW
        - TO_APPROVE
        - APPROVED

    UserRegisterResponse:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
    UserGetResponse:
      type: object
      required:
        - id
        - email
        - roles
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
        email:
          type: string
          format: email
          example: example@mail.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          example: [ "BASIC" ]
        firstName:
          type: string
          example: FirstName
        lastName:
          type: string
          example: LastName
    UserRegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: example@mail.com
        password:
          type: string
          format: password
          example: P@$$w0rd!
    UserUpdateRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: example@mail.com
        firstName:
          type: string
          example: NewFirstName
        lastName:
          type: string
          example: NewLastName
    UserUpdatePasswordRequest:
      type: object
      required:
        - newPassword
      properties:
        newPassword:
          type: string
          example: p@$$w0rd!

    TreeCreateRequest:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          example: 0.0
        longitude:
          type: number
          format: double
          example: 0.0

    TreeCreateResponse:
      type: object
      required:
        - treeId
        - status
      properties:
        treeId:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff

    TreesByRegionRequest:
      type: object
      required:
        - x1
        - y1
        - x2
        - y2
      properties:
        x1:
          type: number
          format: double
          example: 0.0
        y1:
          type: number
          format: double
          example: 0.0
        x2:
          type: number
          format: double
          example: 0.0
        y2:
          type: number
          format: double
          example: 0.0

    TreesGetResponse:
      type: array
      items:
        $ref: '#/components/schemas/TreesGetResponseTree'

    TreesGetResponseTree:
      type: object
      required:
        - id
        - latitude
        - longitude
      properties:
        id:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
        latitude:
          type: number
          format: double
          example: 0.0
        longitude:
          type: number
          format: double
          example: 0.0
        status:
          $ref: '#/components/schemas/TreeStatus'

    FileUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
    FileUploadResponse:
      type: object
      required:
        - fileId
      properties:
        fileId:
          type: string
          format: uuid
          example: 70c47221-2181-40fb-8909-4d7e3549c4d4
    FileGetResponse:
      type: object
      required:
        - id
        - name
        - mimeType
        - size
        - hash
        - userId
      properties:
        id:
          type: string
          format: uuid
          example: 70c47221-2181-40fb-8909-4d7e3549c4d4
        name:
          type: string
          example: "example.txt"
        mimeType:
          type: string
          example: "text/plain"
        size:
          type: integer
          format: int64
          example: 12
        hash:
          type: string
          example: 674401448c4bc69e39b49a7d867058f4
        userId:
          type: string
          format: uuid
          example: 1a60dc75-6e43-4e62-becf-2683042b4818

    ErrorResponse:
      description: Error
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: Error code, identifier for type of error
          type: string
          example: Forbidden
        message:
          description: Description of error
          type: string
          example: Something went wrong

  responses:
    BadRequest:
      description: Unexpected request content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Credentials are invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Not enough privileges
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Business exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Unexpected internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    CookieAuth:
      type: apiKey
      in: cookie
      name: ct_refresh_token

