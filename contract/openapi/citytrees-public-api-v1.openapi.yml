openapi: 3.0.0

info:
  title: citytrees public API
  contact:
    name: Nagovitsin Maxim
    email: nagovitsin.maxim@gmail.com
  version: 0.0.1

servers:
  - url: http://localhost:8080/api/v1
    description: local environment

paths:
  /user/register:
    post:
      tags:
        - user-controller
      summary: Registers new user
      operationId: registerNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        200:
          description: User successfully created. User id is in response's body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegisterResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/{id}:
    get:
      tags:
        - user-controller
      summary: Returns user's information
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user-controller
      summary: Edits user's information
      operationId: updateUserById
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/password:
    put:
      tags:
        - user-controller
      summary: Updates current user's password
      operationId: updateUserPassword
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePasswordRequest"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/confirm:
    put:
      tags:
        - user-controller
      summary: Confirm user email
      operationId: confirmUserEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEmailConfirmRequest"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/password/reset:
    post:
      tags:
        - user-controller
      summary: Request reset user password
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestPasswordResetRequest"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user-controller
      summary: Reset user password
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPasswordResetRequest"
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/jwt/refresh:
    post:
      tags:
        - auth-controller
      summary: Create new pair of Cookies (ct_access_token, ct_refresh_token) using old ct_refresh_token
      operationId: refreshTokenPair
      security:
        - CookieAuth: [ ]
      parameters:
        - name: ct_refresh_token
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: Successfully refreshed token pair. Access and Refresh tokens are returned in cookies named 'ct_access_token' and 'ct_refresh_token'. Refresh token is HttpOnly
          headers:
            Set-Cookie:
              schema:
                type: string
                example: ct_access_token=some_jwt; Path=/;
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/basic:
    post:
      tags:
        - auth-controller
      summary: Authenticate user using login and password
      operationId: handleBasicAuth
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully authenticated. Access and Refresh tokens are returned in cookies named 'ct_access_token' and 'ct_refresh_token'. Refresh token is HttpOnly.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: ct_access_token=some_jwt; Path=/;
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    post:
      tags:
        - auth-controller
      summary: Logout
      operationId: handleLogout
      security:
        - CookieAuth: [ ]
      parameters:
        - name: ct_refresh_token
          in: cookie
          schema:
            type: string
      responses:
        200:
          description: Removes cookies
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/oauth2/{provider}:
    get:
      tags:
        - auth-controller
      summary: Authenticates user using third-party provider
      operationId: handle0Auth2
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum:
              - google
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tree:
    post:
      tags:
        - tree-controller
      summary: Add new tree
      operationId: createTree
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TreeCreateRequest"
      responses:
        200:
          description: Tree successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TreeCreateResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /tree/{id}:
    get:
      tags:
        - tree-controller
      summary: Return tree information
      operationId: getTreeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Tree information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreeGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - tree-controller
      summary: Update tree
      operationId: updateTreeById
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TreeUpdateRequest'
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - tree-controller
      summary: Delete tree by id
      operationId: deleteTree
      security:
        - BearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tree/{treeId}/approve:
    put:
      tags:
        - tree-controller
      summary: Approve tree
      operationId: approveTree
      security:
        - BearerAuth: [ ]
      parameters:
        - name: treeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tree/{treeId}/file:
    post:
      tags:
        - tree-controller
      summary: Attach file to tree
      operationId: attachFile
      security:
        - BearerAuth: [ ]
      parameters:
        - name: treeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUploadRequest"
      responses:
        200:
          description: File successfully uploaded. It's id is in response's body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tree/{treeId}/file/all:
    get:
      tags:
        - tree-controller
      summary: Load all attached files
      operationId: getAllAttachedFiles
      parameters:
        - name: treeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Return tree files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeGetAttachedFileResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /trees:
    get:
      tags:
        - trees-controller
      summary: Load trees in region
      operationId: loadTreesByRegion
      parameters:
        - name: x1
          description: top left latitude
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: y1
          description: top left longitude
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: x2
          description: bottom right latitude
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: y2
          description: bottom right longitude
          in: query
          required: true
          schema:
            type: number
            format: double
      responses:
        200:
          description: Trees in specified region
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreesGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /trees/clusters:
    get:
      deprecated: true
      tags:
        - trees-controller
      summary: Load trees clusters in region
      operationId: loadTreesClustersByRegion
      parameters:
        - name: x1
          description: top left latitude
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: y1
          description: top left longitude
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: x2
          description: bottom right latitude
          in: query
          required: true
          schema:
            type: number
            format: double
        - name: y2
          description: bottom right longitude
          in: query
          required: true
          schema:
            type: number
            format: double
      responses:
        200:
          description: Trees clusters in specified region
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreesClusterGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /tree/all:
    get:
      tags:
        - tree-controller
      summary: Get all trees
      operationId: getAll
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            maximum: 50
        - name: cursorPosition
          in: query
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TreeShortGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /tree/all/count:
    get:
      tags:
        - tree-controller
      summary: Count all trees
      operationId: getAllTreesCount
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreeCountAllGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'


  /wood-type:
    post:
      tags:
        - wood-type-controller
      summary: Add new type of wood
      operationId: createWoodType
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WoodTypeCreateRequest'
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /wood-type/all:
    get:
      tags:
        - wood-type-controller
      summary: Get all types of wood
      operationId: getAllWoodTypes
      responses:
        200:
          description: Returns file's data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WoodTypeResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /file/upload:
    post:
      tags:
        - file-controller
      summary: Uploads file
      operationId: uploadFile
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FileUploadRequest"
      responses:
        200:
          description: File successfully uploaded. It's id is in response's body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /file/{id}:
    get:
      tags:
        - file-controller
      operationId: getFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Returns file's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - file-controller
      operationId: deleteFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /file/download/{id}:
    get:
      tags:
        - file-controller
      operationId: downloadFile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Downloads file
          content:
            text/plain:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    UserRole:
      type: string
      enum:
        - ADMIN
        - MODERATOR
        - BASIC

    UserStatus:
      type: string
      enum:
        - NEW
        - TO_BE_APPROVED
        - APPROVED
        - BANNED

    UserPasswordResetStatus:
      type: string
      enum:
        - NEW
        - SENT

    TreeStatus:
      type: string
      enum:
        - NEW
        - TO_APPROVE
        - APPROVED
        - DELETED

    TreeState:
      type: string
      enum:
        - ALIVE
        - DEAD
        - STUMP

    TreeCondition:
      type: string
      enum:
        - VERY_BAD
        - BAD
        - NORMAL
        - GREAT
        - AWESOME

    TreeBarkCondition:
      type: string
      enum:
        - HOLLOW
        - GROWTH
        - CRACK
        - MECHANICAL_DAMAGE

    TreeBranchCondition:
      type: string
      enum:
        - DEAD
        - BROKEN
        - CUT
        - DANGEROUSLY_OVERHANGING

    TreePlantingType:
      type: string
      enum:
        - SELF_SEEDING
        - CULTURAL_SEEDING

    UserRegisterResponse:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
    UserGetResponse:
      type: object
      required:
        - id
        - email
        - roles
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
        email:
          type: string
          format: email
          example: example@mail.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          example: [ "BASIC" ]
        firstName:
          type: string
          example: FirstName
        lastName:
          type: string
          example: LastName
    UserRegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: example@mail.com
        password:
          type: string
          format: password
          example: P@$$w0rd!
    UserUpdateRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: example@mail.com
        firstName:
          type: string
          example: NewFirstName
        lastName:
          type: string
          example: NewLastName
    UserUpdatePasswordRequest:
      type: object
      required:
        - newPassword
      properties:
        newPassword:
          type: string
          example: p@$$w0rd!
    UserEmailConfirmRequest:
      type: object
      required:
        - userId
        - confirmationId
      properties:
        userId:
          type: string
          format: uuid
        confirmationId:
          type: string
    UserRequestPasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: mail@example.io
    UserPasswordResetRequest:
      type: object
      required:
        - email
        - token
        - newPassword
      properties:
        email:
          type: string
          format: email
          example: mail@example.io
        token:
          type: string
        newPassword:
          type: string

    TreeCreateRequest:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          example: 0.0
        longitude:
          type: number
          format: double
          example: 0.0

    TreeCreateResponse:
      type: object
      required:
        - treeId
      properties:
        treeId:
          type: integer
          format: int64
          example: ed156378-204b-473c-9d2a-886941a819ff

    TreeGetResponse:
      type: object
      required:
        - id
        - userId
        - status
        - latitude
        - longitude
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
        status:
          $ref: '#/components/schemas/TreeStatus'
        latitude:
          type: number
          format: double
          example: 0.0
        longitude:
          type: number
          format: double
          example: 0.0
        woodTypeId:
          type: string
          format: uuid
        woodTypeName:
          type: string
        state:
          $ref: '#/components/schemas/TreeState'
        age:
          type: integer
        condition:
          $ref: '#/components/schemas/TreeCondition'
        barkCondition:
          type: array
          items:
            $ref: '#/components/schemas/TreeBarkCondition'
        branchesCondition:
          type: array
          items:
            $ref: '#/components/schemas/TreeBranchCondition'
        plantingType:
          $ref: '#/components/schemas/TreePlantingType'
        comment:
          type: string
        fileIds:
          type: array
          items:
            type: string
        diameterOfCrown:
          type: number
          format: double
        heightOfTheFirstBranch:
          type: number
          format: double
        numberOfTreeTrunks:
          type: integer
        treeHeight:
          type: number
          format: double
        trunkGirth:
          type: number
          format: double

    TreeGetAttachedFileResponse:
      type: object
      required:
        - id
        - size
        - name
        - url
      properties:
        id:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
        size:
          type: integer
          format: int64
        name:
          type: string
        url:
          type: string

    TreeUpdateRequest:
      type: object
      required:
        - status
      properties:
        woodTypeId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/TreeStatus'
        state:
          $ref: '#/components/schemas/TreeState'
        age:
          type: integer
        condition:
          $ref: '#/components/schemas/TreeCondition'
        barkCondition:
          type: array
          items:
            $ref: '#/components/schemas/TreeBarkCondition'
        branchesCondition:
          type: array
          items:
            $ref: '#/components/schemas/TreeBranchCondition'
        plantingType:
          $ref: '#/components/schemas/TreePlantingType'
        comment:
          type: string
        fileIds:
          type: array
          items:
            type: string
            format: uuid
        diameterOfCrown:
          type: number
          format: double
        heightOfTheFirstBranch:
          type: number
          format: double
        numberOfTreeTrunks:
          type: integer
          format: double
        treeHeight:
          type: number
          format: double
        trunkGirth:
          type: number
          format: double

    TreeCountAllGetResponse:
      type: object
      required:
        - count
      properties:
        count:
          type: integer
          format: int64

    TreesByRegionRequest:
      type: object
      required:
        - x1
        - y1
        - x2
        - y2
      properties:
        x1:
          type: number
          format: double
          example: 0.0
        y1:
          type: number
          format: double
          example: 0.0
        x2:
          type: number
          format: double
          example: 0.0
        y2:
          type: number
          format: double
          example: 0.0

    TreesGetResponse:
      type: array
      items:
        $ref: '#/components/schemas/TreeShortGetResponse'

    TreeShortGetResponse:
      type: object
      required:
        - id
        - latitude
        - longitude
        - status
        - fileUrls
      properties:
        id:
          type: integer
          format: int64
        latitude:
          type: number
          format: double
          example: 0.0
        longitude:
          type: number
          format: double
          example: 0.0
        status:
          $ref: '#/components/schemas/TreeStatus'
        woodTypeId:
          type: string
          format: uuid
        woodTypeName:
          type: string
        treeHeight:
          type: number
          format: double
        trunkGirth:
          type: number
          format: double
        fileUrls:
          type: array
          items:
            type: string

    TreesClusterGetResponse:
      type: object
      required:
        - latitude
        - longitude
        - count
      properties:
        latitude:
          type: number
          format: double
          example: 0.0
        longitude:
          type: number
          format: double
          example: 0.0
        count:
          type: integer
          format: int64

    WoodTypeCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 30

    WoodTypeResponse:
      type: object
      required:
        - id
        - name
        - userId
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        userId:
          type: string
          format: uuid

    FileUploadRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary

    FileUploadResponse:
      type: object
      required:
        - fileId
        - url
      properties:
        fileId:
          type: string
          format: uuid
          example: 70c47221-2181-40fb-8909-4d7e3549c4d4
        url:
          type: string

    FileGetResponse:
      type: object
      required:
        - id
        - name
        - mimeType
        - size
        - hash
        - userId
      properties:
        id:
          type: string
          format: uuid
          example: 70c47221-2181-40fb-8909-4d7e3549c4d4
        name:
          type: string
          example: "example.txt"
        mimeType:
          type: string
          example: "text/plain"
        size:
          type: integer
          format: int64
          example: 12
        hash:
          type: string
          example: 674401448c4bc69e39b49a7d867058f4
        userId:
          type: string
          format: uuid
          example: 1a60dc75-6e43-4e62-becf-2683042b4818

    ErrorResponse:
      description: Error
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: Error code, identifier for type of error
          type: string
          example: Forbidden
        message:
          description: Description of error
          type: string
          example: Something went wrong

  responses:
    BadRequest:
      description: Unexpected request content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Credentials are invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Not enough privileges
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Business exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Unexpected internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    CookieAuth:
      type: apiKey
      in: cookie
      name: ct_refresh_token

