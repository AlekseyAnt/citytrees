openapi: 3.0.0

info:
  title: citytrees public API
  contact:
    name: Nagovitsin Maxim
    email: nagovitsin.maxim@gmail.com
  version: 0.0.1

servers:
  - url: http://localhost:8080/api/v1
    description: local environment

paths:
  /user/register:
    post:
      tags:
        - user-controller
      summary: Registers new user
      operationId: registerNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
      responses:
        200:
          description: User successfully created, his id is in response's body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegisterResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
  /user/{id}:
    get:
      tags:
        - user-controller
      summary: Returns user's information
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User's information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - user-controller
      summary: Edits user's information
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/jwt/refresh:
    post:
      tags:
        - auth-controller
      summary: Create new pair of Cookie (access_token, refresh_token) using old refresh_token
      operationId: refreshTokenPair
      parameters:
        - name: RefreshToken
          in: cookie
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/basic:
    post:
      tags:
        - auth-controller
      summary: Authenticate user using login and password, JWT tokens will be returned as Cookies (access_token, refresh_token)
      operationId: handleBasicAuth
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/oauth2/{provider}:
    get:
      tags:
        - auth-controller
      summary: Производит аутентификацию пользователя с помощью стороннего провайдера
      operationId: handle0Auth2
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
            enum:
              - vk
      responses:
        200:
          description: OK
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    UserRole:
      type: string
      enum:
        - ADMIN
        - BASIC
    UserRegisterResponse:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
    UserGetResponse:
      type: object
      required:
        - id
        - email
        - roles
        - firstName
        - lastName
      properties:
        id:
          type: string
          format: uuid
          example: ed156378-204b-473c-9d2a-886941a819ff
        email:
          type: string
          format: email
          example: example@mail.com
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          example: [ "BASIC" ]
        firstName:
          type: string
          example: FirstName
        lastName:
          type: string
          example: LastName
    UserRegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: example@mail.com
        password:
          type: string
          format: password
          example: P@$$w0rd!
    UserUpdateRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: example@mail.com
        firstName:
          type: string
          example: NewFirstName
        lastName:
          type: string
          example: NewLastName

    ErrorResponse:
      description: Error
      type: object
      required:
        - id
        - code
        - message
      properties:
        id:
          description: Unique identifier of error
          type: string
          format: uuid
          example: 6e612d3c-d7a3-4aa4-9ff0-a2fb667e02b1
        code:
          description: Error code, identifier for type of error
          type: string
          example: Forbidden
        message:
          description: Description of error
          type: string
          example: Not enough privileges to delete user

  responses:
    BadRequest:
      description: Unexpected request content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Credentials are invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Not enough privileges
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnprocessableEntity:
      description: Business exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Unexpected internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
